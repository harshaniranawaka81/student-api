<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StudentApi</name>
    </assembly>
    <members>
        <member name="T:StudentApi.Controllers.StudentController">
            <summary>
            API to handle student information
            </summary>
        </member>
        <member name="M:StudentApi.Controllers.StudentController.#ctor(Microsoft.Extensions.Logging.ILogger{StudentApi.Controllers.StudentController},StudentApi.Business.Services.IStudentService)">
            <summary>
            Student controller 
            </summary>
            <param name="logger"></param>
            <param name="studentService"></param>
        </member>
        <member name="M:StudentApi.Controllers.StudentController.GetAllStudents">
            <summary>
            Get all student details
            </summary>
            <returns></returns>
        </member>
        <member name="M:StudentApi.Controllers.StudentController.GetStudent(System.Int32)">
            <summary>
            Get student details using the id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:StudentApi.Controllers.StudentController.SaveStudent(StudentApi.Repository.Contracts.Student)">
            <summary>
            Save a new student in the database
            </summary>
            <param name="student"></param>
            <returns></returns>
        </member>
        <member name="M:StudentApi.Controllers.StudentController.DeleteStudent(System.Int32)">
            <summary>
            Delete a student from the database usun
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:WeatherService.Api.Extensions.MiddlewareExtensions">
            <summary>
            Class to store all extension methods to register custom middleware
            </summary>
        </member>
        <member name="M:WeatherService.Api.Extensions.MiddlewareExtensions.UseExceptionMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Register the exception middleware
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:WeatherService.Api.Extensions.ServiceExtensions">
            <summary>
            Class to store all service extensions
            </summary>
        </member>
        <member name="M:WeatherService.Api.Extensions.ServiceExtensions.ConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure the Swagger endpoint for the API
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WeatherService.Api.Extensions.ServiceExtensions.ConfigureCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure CORS policies
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WeatherService.Api.Extensions.ServiceExtensions.ConfigureDb(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Configure the database connection
            </summary>
            <param name="services"></param>
            <param name="connecionString"></param>
        </member>
        <member name="M:WeatherService.Api.Extensions.ServiceExtensions.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register all custom services
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WeatherService.Api.Extensions.ServiceExtensions.ConfigureLogging(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Configure the logging
            </summary>
            <param name="app"></param>
        </member>
    </members>
</doc>
